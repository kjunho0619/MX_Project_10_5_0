// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package fileapiinterface.actions;

import java.io.File;
import java.io.InputStream;
import org.apache.commons.io.FileUtils;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class JVA_UploadFile_PhysicalPathDwonload extends CustomJavaAction<java.lang.String>
{
	private final java.lang.String FilePath;
	/** @deprecated use UploadFile.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __UploadFile;
	private final fileapiinterface.proxies.UploadFile UploadFile;

	public JVA_UploadFile_PhysicalPathDwonload(
		IContext context,
		java.lang.String _filePath,
		IMendixObject _uploadFile
	)
	{
		super(context);
		this.FilePath = _filePath;
		this.__UploadFile = _uploadFile;
		this.UploadFile = _uploadFile == null ? null : fileapiinterface.proxies.UploadFile.initialize(getContext(), _uploadFile);
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext ict = this.getContext();
		
		//파일이름 획득
		String fileName = this.UploadFile.getName();
		_Logger.warn("fileName : " + fileName);
		
		//파일경로 리턴값 객체 생성
		String returnValue  = this.FilePath + this.UploadFile.getMendixObject().getId().toLong() + "_" + fileName;
		_Logger.warn("filePATH : " + returnValue);
		
		//FileDocument -> InputStream 객체화
		InputStream is = Core.getFileDocumentContent(ict, this.UploadFile.getMendixObject());	
		
		//InputSteam객체에서 File 객체 생성
		File f = new File(returnValue);
		
		if(f.exists()) {
			_Logger.warn(returnValue + "파일 존재");
		}else {
			f.createNewFile();
		}
		
		FileUtils.copyInputStreamToFile(is, f);
		
		return returnValue;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JVA_UploadFile_PhysicalPathDwonload";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode _Logger = Core.getLogger("JVA_UploadFile_PhysicalPathDwonload");
	// END EXTRA CODE
}
