// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package wizdocmodule.actions;

import java.util.UUID;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import communitycommons.Misc;
import communitycommons.StringUtils;
import wizdocmodule.proxies.DocumentRichIMG;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class JAT_DocumentIMG_Base64String extends CustomJavaAction<java.lang.Void>
{
	/** @deprecated use com.mendix.utils.ListUtils.map(DocumentTextList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __DocumentTextList;
	private final java.util.List<wizdocmodule.proxies.DocumentText> DocumentTextList;
	/** @deprecated use Document.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Document;
	private final wizdocmodule.proxies.Document Document;

	public JAT_DocumentIMG_Base64String(
		IContext context,
		java.util.List<IMendixObject> _documentTextList,
		IMendixObject _document
	)
	{
		super(context);
		this.__DocumentTextList = _documentTextList;
		this.DocumentTextList = java.util.Optional.ofNullable(_documentTextList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(documentTextListElement -> wizdocmodule.proxies.DocumentText.initialize(getContext(), documentTextListElement))
			.collect(java.util.stream.Collectors.toList());
		this.__Document = _document;
		this.Document = _document == null ? null : wizdocmodule.proxies.Document.initialize(getContext(), _document);
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		IContext ict = this.getContext();
		
		//Server ApplicationURL
		String applicationURL = Misc.getApplicationURL();
		//_Logger.info("ApplicationURL : " + applicationURL);
		
		//docText Image 문자열을 담고있는 함수
		String searchString = "data:image/";
		
		// List 반복 forEach
		this.DocumentTextList.forEach((mxobj) -> {
			
			//로그 before text
			String docText = mxobj.getDocText();
			_Logger.info("base64 change before text : " + docText);

			//indexOf()를 사용하여 특정 문자 찾기
			int pos = docText.indexOf(searchString);
			
			try {
				while(pos > -1) {
					
					//base64까지 자른 index저장
					String searchBase64String = "base64,";
					int base64pos = docText.indexOf(searchBase64String, pos + 1);
					
					//base64String 추출
					String base64 = docText.substring(base64pos + searchBase64String.length(), docText.indexOf('"', base64pos + 1));
					_Logger.info("Base64 TextCut : " + base64);
					
					//RichTextImage 저장 객체 생성
					DocumentRichIMG base64Img = new DocumentRichIMG(ict);
					//_Logger.info("base64Img guid : " + base64Img.getMendixObject().getId().toLong());
					Long imgOjbGUID = base64Img.getMendixObject().getId().toLong();
					
					//base64Img Set Name, Set Association
					base64Img.setName(imgOjbGUID.toString() + "_" + mxobj.getDocTextTitle(ict) + "_img" + StringUtils.randomString(3));
					base64Img.setDocumentRichIMG_Document(ict, Document);
					
					//base64 Decoding
					StringUtils.base64DecodeToFile(ict, base64, base64Img);
					
					//file dwonload URL 생성
					String fileURL = applicationURL + "/file?guid=" + imgOjbGUID;
					//_Logger.info("file URL : " + fileURL);
					
					//Replace String
					String replaceDocText = docText.replace(docText.substring(pos, docText.indexOf('"', pos + 1)), fileURL);
					_Logger.info("base64 change After text : " + replaceDocText);
					mxobj.setDocText(replaceDocText);
					
					//다음 pos 위치 찾기
					pos = mxobj.getDocText().indexOf(searchString, pos + 1);
					
				}
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				_Logger.error("Error : " + e.getMessage());
			}
			
		});
		
		return null;
		
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JAT_DocumentIMG_Base64String";
	}

	// BEGIN EXTRA CODE
	// 멘딕스 Application에 실행 시 나타낼 Log함수 선언
	protected static ILogNode _Logger = Core.getLogger("java base64 convert");
	// END EXTRA CODE
}
